{"version":3,"sources":["resources/marvel.jpg","components/pagination.js","components/comics.js","components/comic.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pagination","itemsPerPage","totalItems","paginate","currentPage","pageNumbers","i","Math","ceil","push","className","map","number","key","onClick","href","Comics","props","useState","setCurrentPage","comicsPerPage","indexOfLastComic","indexOfFirstComic","currentComics","filteredComics","slice","data-testid","type","title","toggleClass","icon","faSearch","inputHidden","value","inputValue","onChange","event","onSearchCharacter","placeholder","comic","alt","src","thumbnail","path","extension","creators","items","length","creator","name","urls","find","url","target","id","rel","faPlus","pageNumber","Comic","comicId","useParams","setComic","useEffect","ts","Date","getTime","hash","md5","a","fetch","process","then","response","json","data","results","catch","err","console","log","fetchData","Object","keys","obj","dates","date","moment","isValid","format","prices","price","toFixed","description","characters","character","App","state","comics","showWindowPortal","setState","searchKey","filter","toLowerCase","includes","logo","width","this","toggleWindowPortal","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,uSC4B5BC,G,YAzBI,SAAC,GAGhB,IAHyE,IAAvDC,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAChDC,EAAc,GAEXC,EAAI,EAAGA,GAAKC,KAAKC,KAAKN,EAAaD,GAAeK,IACvDD,EAAYI,KAAKH,GAGrB,OACI,+BACI,+BACI,wBAAII,UAAU,cACV,oCACCL,EAAYM,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,EAAQF,UAAU,IACvB,yBAAKA,UAAWN,IAAgBQ,EAAS,WAAa,IAAI,uBAAGE,QAAS,kBAAMX,EAASS,IAASG,KAAK,KAAKL,UAAU,IAAxD,MAC1D,yBAAKA,UAAU,UAAUE,OAGjC,sC,gBCuDLI,EArEA,SAACC,GAAW,IAAD,EACgBC,mBAAS,GADzB,mBACfd,EADe,KACFe,EADE,OAEED,mBAAS,IAA1BE,EAFe,oBAGhBC,EAAmBjB,EAAcgB,EACjCE,EAAoBD,EAAmBD,EACvCG,EAAgBN,EAAMO,eAAeC,MAAMH,EAAmBD,GAWpE,OACI,6BACI,yBAAKK,cAAY,SAAShB,UAAU,UAChC,4BAAQiB,KAAK,SAASC,MAAM,4BAA4BlB,UAAU,iBAAiBI,QAASG,EAAMY,aAC9F,kBAAC,IAAD,CAAiBC,KAAMC,OAG3B,2BACIrB,UAAS,uBAAkBO,EAAMe,YAAc,UAAY,WAC3DL,KAAK,OACLM,MAAOhB,EAAMiB,WACbC,SAhBM,SAACC,GACnBjB,EAAe,GACfF,EAAMoB,kBAAkBD,IAeZE,YAAY,oCAIpB,yBAAK5B,UAAU,OAAOgB,cAAY,QAC7BH,EAAcZ,KAAI,SAAC4B,EAAOjC,GAAR,OACf,yBAAKI,UAAU,YAAYG,IAAG,gBAAWP,IACrC,6BACI,yBAAKO,IAAI,MAAM2B,IAAKD,EAAMX,MAAOa,IAAG,UAAKF,EAAMG,UAAUC,KAArB,gCAAiDJ,EAAMG,UAAUE,WAAalC,UAAU,aAAakB,MAAOW,EAAMX,QACtJ,yBAAKlB,UAAU,SAAS6B,EAAMX,OAC9B,yBAAKlB,UAAU,YAAf,YACc,IACuB,IAAhC6B,EAAMM,SAASC,MAAMC,OAAe,gBAC/BR,EAAMM,SAASC,MAAMnC,KAAI,SAACqC,EAAS1C,GACjC,OAAOA,IAAMiC,EAAMM,SAASC,MAAMC,OAAS,EAAIC,EAAQC,KAAOD,EAAQC,KAAO,UAK7F,yBAAKvC,UAAU,UACX,yBAAKA,UAAU,iBACX,uBAAGK,KAA4B,IAAtBwB,EAAMW,KAAKH,OAAe,oBAC/BR,EAAMW,KAAKC,MAAK,SAACC,GAAD,MAAsB,WAAbA,EAAIzB,QAAqBY,EAAMW,KAAKC,MAAK,SAACC,GAAD,MAAsB,WAAbA,EAAIzB,QAAmByB,IAAMb,EAAMW,KAAK,GAAGE,IACtHxB,MAAM,iCAAiCyB,OAAO,UAFlD,MAIJ,yBAAK3C,UAAU,WACX,kBAAC,IAAD,KACI,uBAAGK,KAAI,iBAAYwB,EAAMe,IAAMD,OAAO,SAASE,IAAI,sBAAsB3B,MAAM,sBAC3E,kBAAC,IAAD,CAAiBE,KAAM0B,eAQnD,kBAAC,EAAD,CAAYvD,aAAcmB,EAAelB,WAAYe,EAAMO,eAAeuB,OAAQ5C,SAzDzE,SAACsD,GACdtC,EAAesC,IAwD2FrD,YAAaA,M,0DCUhHsD,MAxEf,WAAkB,IACPC,EAAYC,cAAZD,QADM,EAEazC,mBAAS,IAFtB,mBAENqB,EAFM,KAECsB,EAFD,KAoBb,OAfAC,qBAAU,WACN,IAAIC,GAAK,IAAIC,MAAOC,UAChBC,EAAOC,IAAIJ,8EAFH,4CAIZ,sBAAAK,EAAA,sEACUC,MAAM,mDAAD,OAAoDV,EAApD,mBAAsEW,mCAAtE,eAA6GP,EAA7G,iBAAwHG,IAC9HK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACFZ,EAASY,EAAKC,KAAKC,QAAQ,OAE9BC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MANlC,4CAJY,0DAYZG,KACD,CAACrB,IAGAsB,OAAOC,KAAK3C,GAAO5B,KAAI,SAACwE,EAAK7E,GACzB,OAAU,IAANA,EAEI,yBAAKI,UAAU,QAAQG,IAAKP,GACxB,yBAAKI,UAAU,SAAS6B,EAAMX,OAC9B,yBAAKlB,UAAU,YAAf,aAAqE,IAAhC6B,EAAMM,SAASC,MAAMC,OAAe,gBAAkBR,EAAMM,SAASC,MAAMnC,KAAI,SAACqC,EAAS1C,GAC1H,OAAOA,IAAMiC,EAAMM,SAASC,MAAMC,OAAS,EAAIC,EAAQC,KAAOD,EAAQC,KAAO,SAGjF,yBAAKvC,UAAU,uBACX,wCACC6B,EAAM6C,MAAMrC,OAAS,GAAKR,EAAM6C,MAAMjC,MAAK,SAACkC,GAAD,MAAwB,YAAdA,EAAK1D,SACpD2D,IAAO/C,EAAM6C,MAAMjC,MAAK,SAACkC,GAAD,MAAwB,YAAdA,EAAK1D,QAAoB0D,MAAME,UAClEC,YAAO,IAAIxB,KAAKzB,EAAM6C,MAAMjC,MAAK,SAACkC,GAAD,MAAwB,YAAdA,EAAK1D,QAAoB0D,MAAO,gBAC3E,iBAGV,yBAAK3E,UAAU,mBACX,+CADJ,IAEK6B,EAAMkD,OAAO1C,OAAS,GAAKR,EAAMkD,OAAOtC,MAAK,SAACuC,GAAD,MAA0B,eAAfA,EAAM/D,SACqB,kBAArEY,EAAMkD,OAAOtC,MAAK,SAACuC,GAAD,MAA0B,eAAfA,EAAM/D,QAAuB+D,MACnEnD,EAAMkD,OAAOtC,MAAK,SAACuC,GAAD,MAA0B,eAAfA,EAAM/D,QAAuB+D,MAAMC,QAAQ,GACxE,iBAGV,yBAAKjF,UAAU,aACX,yBAAKG,IAAI,MAAM2B,IAAKD,EAAMX,MAAOa,IAAG,UAAKF,EAAK,UAAcI,KAAxB,mBAAuCJ,EAAK,UAAcK,WAAalC,UAAU,aAAakB,MAAOW,EAAMX,QAC/I,yBAAKlB,UAAU,aACX,yBAAKA,UAAU,eAAe6B,EAAMqD,YAAcrD,EAAMqD,YAAc,8BAE1E,yBAAKlF,UAAU,iBACX,uBAAGK,KAA4B,IAAtBwB,EAAMW,KAAKH,OAAe,oBAC/BR,EAAMW,KAAKC,MAAK,SAACC,GAAD,MAAsB,WAAbA,EAAIzB,QAAqBY,EAAMW,KAAKC,MAAK,SAACC,GAAD,MAAsB,WAAbA,EAAIzB,QAAmByB,IAAMb,EAAMW,KAAK,GAAGE,IACtHxB,MAAM,iCAAiCyB,OAAO,UAFlD,MAIJ,yBAAK3C,UAAU,cACX,0CACmC,IAAlC6B,EAAMsD,WAAW/C,MAAMC,OAAe,gBACnC,4BAAKR,EAAMsD,WAAW/C,MAAMnC,KAAI,SAACmF,EAAWxF,GAAZ,OAC5B,4BAAKwF,EAAU7C,aAOpC,S,iBCaJ8C,G,kNAhFXC,MAAQ,CACJxE,eAAgB,GAChByE,OAAQ,GACR/D,WAAY,GACZF,aAAa,EACbkE,kBAAkB,G,EAqDtBrE,YAAc,WACV,EAAKsE,SAAS,CAAEnE,aAAc,EAAKgE,MAAMhE,e,EAG7CK,kBAAoB,SAACD,GACjB,IAAIgE,EAAYhE,EAAMiB,OAAOpB,MAC7B,EAAKkE,SAAS,CAAEjE,WAAYkE,IAEH,IAArBA,EAAUrD,OACV,EAAKoD,SAAS,CAAE3E,eAAgB,EAAKwE,MAAMC,SAE3C,EAAKE,SAAS,CACV3E,eAAgB,EAAKwE,MAAMC,OAAOI,QAAO,SAAC9D,GACtC,OAAIA,EAAMsD,WAAW/C,MAAMK,MAAK,SAAC2C,GAAD,OAAeA,EAAU7C,KAAKqD,cAAcC,SAASH,EAAUE,kBACpF/D,EAEJ,W,kEAlEF,IAAD,OACZwB,GAAK,IAAIC,MAAOC,UAChBC,EAAOC,IAAIJ,8EAEfM,MAAM,0DAAD,OAA2DC,mCAA3D,eAAkGP,EAAlG,iBAA6GG,IAC7GK,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GACH,EAAK0B,SAAS,CACVF,OAAQxB,EAAKC,KAAKC,QAClBnD,eAAgBiD,EAAKC,KAAKC,aAGjCC,MAAME,QAAQC,O,+BAInB,OACI,6BACI,yBAAKrE,UAAU,UACX,yBAAK+B,IAAK+D,IAAMhE,IAAI,SAASiE,MAAM,QACnC,0CAEJ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO9D,KAAK,mBACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,uDAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,CACInB,eAAgBkF,KAAKV,MAAMxE,eAC3BU,WAAYwE,KAAKV,MAAM9D,WACvBG,kBAAmBqE,KAAKrE,kBACxBL,YAAa0E,KAAKV,MAAMhE,YACxBH,YAAa6E,KAAK7E,YAClB8E,mBAAoBD,KAAKC,mBACzBT,iBAAkBQ,KAAKV,MAAME,sBAK7C,yBAAKxF,UAAU,UAAf,kD,GApDEkG,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlD,MAAK,SAAAmD,GACJA,EAAaC,gBAEd/C,OAAM,SAAAgD,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.24e30a0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marvel.b344b76d.jpg\";","import React from 'react';\r\nimport './pagination.scss';\r\n\r\nconst Pagination = ({ itemsPerPage, totalItems, paginate, currentPage }) => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                <tr className=\"pagination\">\r\n                    <td>MARV</td>\r\n                    {pageNumbers.map((number) => (\r\n                        <td key={number} className=\"\">\r\n                            <div className={currentPage === number ? 'selected' : ''}><a onClick={() => paginate(number)} href=\"/#\" className=\"\">E</a></div>\r\n                            <div className=\"number\">{number}</div>\r\n                        </td>\r\n                    ))}\r\n                    <td>L</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Pagination","import React, { useState } from \"react\";\r\nimport \"./comics.scss\";\r\nimport Pagination from './pagination';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nconst Comics = (props) => {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [comicsPerPage] = useState(10);\r\n    const indexOfLastComic = currentPage * comicsPerPage;\r\n    const indexOfFirstComic = indexOfLastComic - comicsPerPage;\r\n    const currentComics = props.filteredComics.slice(indexOfFirstComic, indexOfLastComic);\r\n\r\n    const paginate = (pageNumber) => {\r\n        setCurrentPage(pageNumber);\r\n    }\r\n\r\n    const executeSearch = (event) => {\r\n        setCurrentPage(1);\r\n        props.onSearchCharacter(event);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div data-testid=\"search\" className=\"search\">\r\n                <button type=\"button\" title=\"Search comic by character\" className=\"btn btn-danger\" onClick={props.toggleClass}>\r\n                    <FontAwesomeIcon icon={faSearch} />\r\n                </button>\r\n\r\n                <input\r\n                    className={`form-control ${props.inputHidden ? \"hide-el\" : \"show-el\"}`}\r\n                    type=\"text\"\r\n                    value={props.inputValue}\r\n                    onChange={executeSearch}\r\n                    placeholder=\"Search comic by character name\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"grid\" data-testid=\"grid\">\r\n                {currentComics.map((comic, i) => (\r\n                    <div className=\"grid-item\" key={`comic-${i}`}>\r\n                        <div>\r\n                            <img key=\"{i}\" alt={comic.title} src={`${comic.thumbnail.path}/portrait_incredible.${comic.thumbnail.extension}`} className=\"img-center\" title={comic.title} />\r\n                            <div className=\"title\">{comic.title}</div>\r\n                            <div className=\"creators\">\r\n                                Creators:{\" \"}\r\n                                {comic.creators.items.length === 0 ? \"Not Available\"\r\n                                    : comic.creators.items.map((creator, i) => {\r\n                                        return i === comic.creators.items.length - 1 ? creator.name : creator.name + \", \";\r\n                                    })}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"bottom\">\r\n                            <div className=\"little-marvel\">\r\n                                <a href={comic.urls.length === 0 ? 'http://marvel.com' : \r\n                                    comic.urls.find((url) => url.type === 'detail') ? comic.urls.find((url) => url.type === 'detail').url : comic.urls[0].url}\r\n                                    title=\"Open details on Marvel Website\" target=\"_blank\">M</a>\r\n                            </div>\r\n                            <div className=\"details\">\r\n                                <Router>\r\n                                    <a href={`/comic/${comic.id}`} target=\"_blank\" rel=\"noopener noreferrer\" title=\"Open Comic Details\">\r\n                                        <FontAwesomeIcon icon={faPlus} />\r\n                                    </a>\r\n                                </Router>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <Pagination itemsPerPage={comicsPerPage} totalItems={props.filteredComics.length} paginate={paginate} currentPage={currentPage}></Pagination>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comics;\r\n","import React, { useState, useEffect } from 'react';\r\nimport md5 from 'md5';\r\nimport './comic.scss';\r\nimport { format } from \"date-fns\";\r\nimport moment from 'moment';\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\n\r\nfunction Comic() {\r\n     let { comicId } = useParams();\r\n    const [comic, setComic] = useState([]);\r\n\r\n    \r\n    useEffect(() => {          \r\n        var ts = new Date().getTime();\r\n        var hash = md5(ts + process.env.REACT_APP_PRIVATE_KEY + process.env.REACT_APP_PUBLIC_KEY);\r\n\r\n        async function fetchData() {\r\n            await fetch(`https://gateway.marvel.com:443/v1/public/comics/${comicId}?apikey=${process.env.REACT_APP_PUBLIC_KEY}&ts=${ts}&hash=${hash}`)\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    setComic(json.data.results[0]);\r\n                })\r\n                .catch(err => console.log(err));\r\n        }\r\n        fetchData();\r\n    }, [comicId]);\r\n\r\n    return (\r\n        Object.keys(comic).map((obj, i) => {\r\n            if (i === 0) {\r\n                return (\r\n                    <div className=\"comic\" key={i}>\r\n                        <div className=\"title\">{comic.title}</div>\r\n                        <div className=\"creators\">Creators: {comic.creators.items.length === 0 ? 'Not Available' : comic.creators.items.map((creator, i) => {\r\n                            return i === comic.creators.items.length - 1 ? creator.name : creator.name + ', ';\r\n                        })}\r\n                        </div>\r\n                        <div className=\"sale-date name-span\">\r\n                            <span>Date: </span>\r\n                            {comic.dates.length > 0 && comic.dates.find((date) => date.type === \"focDate\")\r\n                                && moment(comic.dates.find((date) => date.type === \"focDate\").date).isValid()\r\n                                ? format(new Date(comic.dates.find((date) => date.type === \"focDate\").date), \"dd MMMM yyyy\")\r\n                                : 'Not Available'}\r\n                        </div>\r\n\r\n                        <div className=\"price name-span\">\r\n                            <span>Print Price: </span>$\r\n                            {comic.prices.length > 0 && comic.prices.find((price) => price.type === \"printPrice\")\r\n                                && typeof (comic.prices.find((price) => price.type === \"printPrice\").price) === 'number'\r\n                                ? comic.prices.find((price) => price.type === \"printPrice\").price.toFixed(2)\r\n                                : 'Not Available'}\r\n                        </div>\r\n\r\n                        <div className=\"main-info\">\r\n                            <img key=\"{i}\" alt={comic.title} src={`${comic[\"thumbnail\"].path}/detail.${comic[\"thumbnail\"].extension}`} className=\"img-center\" title={comic.title} />\r\n                            <div className=\"left-info\">\r\n                                <div className=\"description\">{comic.description ? comic.description : 'Description not available'}</div>\r\n                            </div>\r\n                            <div className=\"little-marvel\">\r\n                                <a href={comic.urls.length === 0 ? 'http://marvel.com' : \r\n                                    comic.urls.find((url) => url.type === 'detail') ? comic.urls.find((url) => url.type === 'detail').url : comic.urls[0].url}\r\n                                    title=\"Open details on Marvel Website\" target=\"_blank\">M</a>\r\n                            </div>\r\n                            <div className=\"characters\">\r\n                                <h5>Characters</h5>\r\n                                {comic.characters.items.length === 0 ? 'Not Available' :\r\n                                    <ul>{comic.characters.items.map((character, i) =>\r\n                                        <li>{character.name}</li>)}\r\n                                    </ul>}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n            return null;\r\n        })\r\n    );\r\n}\r\n\r\nexport default Comic\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport md5 from \"md5\";\r\nimport Comics from \"./components/comics\";\r\nimport Comic from \"./components/comic\";\r\nimport logo from \"./resources/marvel.jpg\";\r\nimport \"./App.scss\";\r\n\r\nclass App extends Component {\r\n    state = {\r\n        filteredComics: [],\r\n        comics: [],\r\n        inputValue: \"\",\r\n        inputHidden: true,\r\n        showWindowPortal: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        var ts = new Date().getTime();\r\n        var hash = md5(ts + process.env.REACT_APP_PRIVATE_KEY + process.env.REACT_APP_PUBLIC_KEY);\r\n\r\n        fetch(`https://gateway.marvel.com:443/v1/public/comics?apikey=${process.env.REACT_APP_PUBLIC_KEY}&ts=${ts}&hash=${hash}`)\r\n            .then((response) => response.json())\r\n            .then((json) => {\r\n                this.setState({\r\n                    comics: json.data.results,\r\n                    filteredComics: json.data.results,\r\n                });\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"header\">\r\n                    <img src={logo} alt=\"marvel\" width=\"200\" />\r\n                    <span> COMICS</span>\r\n                </div>\r\n                <Router>\r\n                    <Switch>\r\n                        <Route path=\"/comic/:comicId\">\r\n                            <Comic />\r\n                        </Route>\r\n                        <Route path=\"/comic\">\r\n                            <h3>Please select a comic.</h3>\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <Comics\r\n                                filteredComics={this.state.filteredComics}\r\n                                inputValue={this.state.inputValue}\r\n                                onSearchCharacter={this.onSearchCharacter}\r\n                                inputHidden={this.state.inputHidden}\r\n                                toggleClass={this.toggleClass}\r\n                                toggleWindowPortal={this.toggleWindowPortal}\r\n                                showWindowPortal={this.state.showWindowPortal}\r\n                            />\r\n                        </Route>\r\n                    </Switch>\r\n                </Router>\r\n                <div className=\"footer\">\r\n                    Data provided by Marvel. © 2014 Marvel\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleClass = () => {\r\n        this.setState({ inputHidden: !this.state.inputHidden });\r\n    };\r\n\r\n    onSearchCharacter = (event) => {\r\n        let searchKey = event.target.value;\r\n        this.setState({ inputValue: searchKey });\r\n\r\n        if (searchKey.length === 0) {\r\n            this.setState({ filteredComics: this.state.comics });\r\n        } else {\r\n            this.setState({\r\n                filteredComics: this.state.comics.filter((comic) => {\r\n                    if (comic.characters.items.find((character) => character.name.toLowerCase().includes(searchKey.toLowerCase()))) {\r\n                        return comic;\r\n                    }\r\n                    return null;\r\n                }),\r\n            });\r\n        }\r\n    };\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}